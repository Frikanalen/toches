# This seems like an OK style guide and we should aspire to follow it: https://graphql-rules.com/

scalar DateTime

type Query {
    videos(filter: VideoFilter, sort: [VideoSort!], page: Int! = 1, perPage: Int! = 20): VideoPagination
    video(id: ID!): Video!
    organization(id: ID!): Organization!
    schedule(filter: ScheduleFilter!, page: Int! = 1, perPage: Int! = 20): SchedulePagination
    bulletins(page: Int! = 1, perPage: Int! = 20): BulletinPagination
    bulletin(id: ID!): Bulletin!
    session: Session!
}

type Mutation {
    login(email: String!, password: String!): Session!
    logout: Boolean
    updateBulletin(bulletin: BulletinInput!, id: ID): Bulletin
}

input BulletinInput {
    text: String
    title: String
}

type UserProfileData {
    id: ID!
    email: String
}

input ScheduleFilter {
    from: DateTime
    to: DateTime
}

input VideoFilter {
    query: String
    organizationId: ID
}

enum VideoSort {
    DATE_ASC,
    DATE_DESC
}

type ScheduleItem {
    id: ID!
    startsAt: DateTime!
    endsAt: DateTime!
    video: Video!
}

type SchedulePagination {
    items: [ScheduleItem!]!
    pageInfo: PaginationInfo!
}

type VideoPagination {
    items: [Video]!
    pageInfo: PaginationInfo!
}

type PaginationInfo {
    # Total number of pages
    totalPages: Int!

    # Total number of items
    totalItems: Int!

    # Current page number
    page: Int!

    # Number of items per page
    perPage: Int!

    # When paginating forwards, are there more items?
    hasNextPage: Boolean!

    # When paginating backwards, are there more items?
    hasPreviousPage: Boolean!
}

schema {
    query: Query
    mutation: Mutation
}

type VideoAsset {
    id: ID!
    path: String!
    type: String!
}

type Organization {
    id: ID!
    name: String!

    brregId: Int
    description: String
    homepage: String
    postalAddress: String!
    streetAddress: String!

    editor: OrganizationEditor!

    createdAt: DateTime
    updatedAt: DateTime

    latestVideos: [Video!],
}

type OrganizationEditor {
    id: ID!
    name: String!
    email: String!
}

type Video {
    id: ID!
    title: String!
    description: String!

    organization: Organization!

    assets: [VideoAsset!]!

    createdAt: DateTime!
    updatedAt: DateTime!

    viewCount: Int
}

type Bulletin {
    id: ID!
    title: String!
    text: String!
    createdAt: DateTime!
    updatedAt: DateTime!
}

type BulletinPagination {
    items: [Bulletin!]!
    pageInfo: PaginationInfo!
}

# Session state object with login status
type Session {
    authenticated: Boolean!
    # if authenticated
    profileData: UserProfileData
}
