# This seems like an OK style guide and we should aspire to follow it: https://graphql-rules.com/

scalar DateTime

type Query {
    videos(filter: VideoFilter, sort: [VideoSort!], page: Int! = 1, perPage: Int! = 20): VideoPagination!
    video(id: ID!): Video!
    organization(id: ID!): Organization!
    schedule(filter: ScheduleFilter!, page: Int! = 1, perPage: Int! = 20): SchedulePagination!
    bulletins(page: Int! = 1, perPage: Int! = 20): BulletinPagination!
    bulletin(id: ID!): Bulletin!
    session: Session!
}

# Todo: as per https://graphql-rules.com/rules/mutation-business-operations
# Our mutations are too general. At least for video, we should differentiate slightly
type Mutation {
    video: VideoMutations!
    user: UserMutations!
    bulletin(bulletin: BulletinInput!): Bulletin!
    organization(organization: OrganizationInput!): Organization!
}

type UserMutations {
    register(input: RegisterInput!): UserMutationResult!
    login(input: LoginInput!): UserMutationResult!
    logout: UserMutationResult!
}

input RegisterInput {
    email: String!
    password: String!
}

input LoginInput {
    email: String!
    password: String!
}

type UserMutationResult {
    status: MutationStatus!
    user: User
}

type VideoMutations {
    create(input: VideoInput!): VideoMutationPayload!
    update(input: VideoInput!): VideoMutationPayload!
    publish(videoId: ID!): VideoMutationPayload!
    unpublish(videoId: ID!): VideoMutationPayload!
    delete(videoId: ID!): VideoMutationPayload!
}

input VideoInput {
    id: ID
    mediaId: ID
    title: String
    description: String
    organizationId: ID
}

type VideoMutationPayload {
    videoId: ID
    video: Video
    status: MutationStatus!
    error: VideoMutationError
}

interface VideoMutationError {
    message: String!
}

enum MutationStatus {
    SUCCESS
    ERROR
}

input BulletinInput {
    id: ID
    text: String
    title: String
}

type User {
    id: ID!
    email: String!
    name: String
    roles: [UserRole!]!
}

type UserRole {
    organization: Organization!
    role: RoleType!
}

enum RoleType {
    EDITOR
    MEMBER
}

input ScheduleFilter {
    from: DateTime
    to: DateTime
}

input VideoFilter {
    query: String
    organizationId: ID
}

enum VideoSort {
    DATE_ASC,
    DATE_DESC
}

type ScheduleItem {
    id: ID!
    startsAt: DateTime!
    endsAt: DateTime!
    video: Video!
}

type SchedulePagination {
    items: [ScheduleItem!]!
    pageInfo: PaginationInfo!
}

type VideoPagination {
    items: [Video]!
    pageInfo: PaginationInfo!
}

type PaginationInfo {
    # Total number of pages
    totalPages: Int!

    # Total number of items
    totalItems: Int!

    # Current page number
    page: Int!

    # Number of items per page
    perPage: Int!

    # When paginating forwards, are there more items?
    hasNextPage: Boolean!

    # When paginating backwards, are there more items?
    hasPreviousPage: Boolean!
}

schema {
    query: Query
    mutation: Mutation
}

type VideoAsset {
    id: ID!
    path: String!
    type: String!
}

type Organization {
    id: ID!
    name: String!

    brregId: Int
    description: String
    homepage: String
    postalAddress: String!
    streetAddress: String!

    editor: OrganizationEditor!

    createdAt: DateTime
    updatedAt: DateTime

    latestVideos: [Video!],
}

input OrganizationInput {
    id: ID
    name: String
    brregId: String
    postalAddress: String
    streetAddress: String
    description: String
    homepage: String
}

type OrganizationEditor {
    id: ID!
    name: String!
    email: String!
}

type Video {
    id: ID!
    title: String!
    description: String!

    organization: Organization!

    assets: [VideoAsset!]!

    createdAt: DateTime!
    updatedAt: DateTime!

    viewCount: Int

    images: VideoImages!
}

type VideoImages {
    thumbLarge: String!
    thumbMedium: String!
    thumbSmall: String!
}

type Bulletin {
    id: ID!
    title: String!
    text: String!
    createdAt: DateTime!
    updatedAt: DateTime!
}

type BulletinPagination {
    items: [Bulletin!]!
    pageInfo: PaginationInfo!
}

# Session state object with login status
type Session {
    authenticated: Boolean!
    # if authenticated
    user: User
}
